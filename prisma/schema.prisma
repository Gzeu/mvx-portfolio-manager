// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  address   String?  @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  portfolios  Portfolio[]
  alerts      Alert[]
  apiKeys     ApiKey[]

  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application models
model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  address     String
  name        String?
  isDefault   Boolean  @default(false)
  totalValue  Decimal  @default(0)
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSyncAt  DateTime?

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets       PortfolioAsset[]
  transactions Transaction[]
  snapshots    PortfolioSnapshot[]

  @@unique([userId, address])
  @@map("portfolios")
}

model PortfolioAsset {
  id           String   @id @default(cuid())
  portfolioId  String
  tokenId      String
  identifier   String
  balance      String
  value        Decimal
  price        Decimal
  percentage   Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  token     Token     @relation(fields: [tokenId], references: [id])

  @@unique([portfolioId, tokenId])
  @@map("portfolio_assets")
}

model Token {
  id           String   @id @default(cuid())
  identifier   String   @unique
  name         String
  symbol       String
  decimals     Int
  type         String   // EGLD, ESDT, NFT, SFT
  logoUrl      String?
  description  String?
  website      String?
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolioAssets PortfolioAsset[]
  priceHistory    TokenPrice[]

  @@map("tokens")
}

model TokenPrice {
  id        String   @id @default(cuid())
  tokenId   String
  price     Decimal
  currency  String   @default("USD")
  timestamp DateTime
  createdAt DateTime @default(now())

  // Relations
  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, timestamp])
  @@map("token_prices")
}

model Transaction {
  id           String   @id @default(cuid())
  portfolioId  String
  hash         String   @unique
  type         String   // send, receive, swap, stake, etc.
  status       String   // success, pending, failed
  from         String
  to           String
  value        String
  fee          String?
  gasUsed      String?
  gasPrice     String?
  tokenId      String?
  nonce        Int?
  timestamp    DateTime
  blockNumber  Int?
  blockHash    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model PortfolioSnapshot {
  id          String   @id @default(cuid())
  portfolioId String
  totalValue  Decimal
  currency    String   @default("USD")
  assetCount  Int
  performance Json     // 24h, 7d, 30d percentage changes
  metadata    Json?    // Additional snapshot data
  createdAt   DateTime @default(now())

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_snapshots")
}

model Alert {
  id          String   @id @default(cuid())
  userId      String
  type        String   // price, portfolio_value, token_activity
  condition   String   // above, below, change_percentage
  value       Decimal
  tokenId     String?
  isActive    Boolean  @default(true)
  isTriggered Boolean  @default(false)
  lastTriggered DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json     // Array of permissions
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model AiChat {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  role      String   // user, assistant
  content   String   @db.Text
  metadata  Json?    // Function calls, context, etc.
  createdAt DateTime @default(now())

  @@index([userId, sessionId])
  @@map("ai_chats")
}
